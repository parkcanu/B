접속해제

$ exit 
$ ^d
=======================
명령행 편집
Delete or BackSpace 문자 삭제
Ctrl + w 단어 삭제
Ctrl + u
=======================
ls	파일 출력
	-a 숨김파일 보여줌
		-/tmp tmp file
	-d 디렉터리 자체의 정보 출력
	-i inode 정보 출력
	-l 파일의 상세정보 출력
	-A ., .. 이외의 모든 파일 목록 출력
	-F 파일의 종류를 표시 (* : 실행, / : 디렉, @ : 심볼릭)
	-L 심볼릭 링크 파일의 경우 원본 파일의 정보를 출력
	-R 하위 디렉터리의 목록까지 출력
	/tmp
========================
date 현재 날짜와 시간 출력
========================
clear 현재 보이는 화면 삭제
========================
man 명령 ( 어떻게 치는지 보여줌)
========================
pwd 현재위치
========================
cd 디렉터리 옮겨가기
========================
디렉터리 생성
mkdir [option] [directory]
	-p 중간파일이 없으면 중간 파일도 만들어줌

rmdir [option] [directory]
	-p 상위 파일이 없어지면 비워진다면 같이 없애줌
==========================
파일 내용 연속으로 출력

cat [option] [file]
	-n 행 번호 출력
==========================
파일 내용을 화면 단위로 출력

more [option] [file]
	+행 번호     몇 번 째 행부터 시작할 것인지
	
less [file]
===========================
파일 내용을 뒷부분 출력

tail [option] [file]
	+행 번호  지정한 행부터 끝까지
	-숫자 화면에 출력할 행의 수를 지정 (기본 10)
	-f 파일 출력을 종료하지 않고 주기적으로 출력:ㅈㅂ
==========================
파일 복사
 file1 -> file2
cp [file1(directory1) [file2(directory2)]
	-i 파일 2가 이미 존재하면 덮어쓸 것인지 물어봄
	-r 디렉터리를 복사할 때 지정
============================
파일 이동
mv [file1(directory1)] [file2(directory2)]
	-i 물어봄

--이동 후 없어짐


파일 삭제
rm [option] [file or directory]
	-i 물어봄
	-r 디렉터리 삭제 시 지정
============================
*********하드링크 만들기

ln [option] [original file] [link file]

	-s 심볼링 링크 파일 생성

빈 파일 만들기, 접근/수정 시간 변경

touch [-acm] [-r ref_file | -t time] [file]
	-a
	-m
	-t**********
=============================
grep [option] [pattern] [file]
	-i
	-l
	-n

find [route] [search condition] [motive]

* 검색조건
	-name filename
	-type 파일 종류
	-user  loginID
	-perm 접근 권한
* 동작
	-exec 명령 {} \;
	-ok 명령 {} \;
	-print
	-ls

whereis [option] [file]
	-b
	-m
	-s

which [command]

------------------------------------------------------

putty login

sudo passwd ubuntu
 - 비밀번호 설정
sudo passwd root
 - 비밀번호 설정
sudo vi/etc/ssh/sshd_config

sudo service ssh restart
 - 재시작


vi
	- 리눅스의 대표적인 문서 편집기
	- vi 업그레이드
	
	• 모드형: 입력 모드와 명령 모드를 구분
		- 입력 모드: 텍스트를 입력할 수 있는 모드
		- 명령 모드: 텍스트 수정/삭제/복사/붙이기 등 편집 모드
	• 비모드형: 모드 구분이 없음: 한글, 워드 등
		- alt, ctrl, shift 등 특수 키를 이용하여 편집 명령 수행
	1. 명령 모드	
		- vi를 실행시키면 가장 먼저 접하는 기본 모드, 명령 모드에 		   서 는 방향키로 이동 가능, 입력 모드 혹은 마지막 행 모드 가		   능
	2. 입력 모드
		- 편집 모드라고도 불리며, 명령어들을 이용해 모드 전환이 가
		 능하다. 입력 모드에서는 자유롭게 코드, 글 작성 가능
	3. 마지막 행 모드
		- 명령 모드에서 ":"키를 입력하면 화면 맨 아랫줄에서 명령을 
		 수행하는 모드


--------------------------------------------------------

명령 모드 -> 입력 모드
	- i insert
	- a 한 칸 뒤부터 insert 실행
	- o 다음 행 띄워서 실행
	- I 행 첫 번째 글자부터 insert
	- A 행 마지막 글자부터 insert
	- O 한 칸 띄우고 그 행에서 insert


입력 모드 -> 명령 모드 
	- esc 키

=============================================================
커서 이동
	- k/j 위, 아래
	- l/h 오른쪽, 왼쪽
	- ^ or 0/$ 행의 처음, 마지막
	- -/+ or Enter key 앞, 다음 행의 처음으로 이동
	- H/M/L 화면의 맨 위(Head), 중간(Middle), 맨 아래 행(Low)으로 이동
	- w/e 단어의 처음, 마지막
	- b  앞 단어의 첫 글자

화면 이동하기
	Ctrl + u  반 화면 위로
	Ctrl + d  반 화면 아래로
	Ctrl + b  한 화면 위로
	Ctrl + f  한 화면 아래로
	Ctrl + y  한 행만 위로 이동
	Ctrl + e 한 행만 아래로

특정 행으로 바로 이동하기
	- G(shift + g) 마지막 행으로 커서 이동
	- 행 번호G(shift + g) 지정한 행 번호로 커서 이동
	- :행 번호 
	- :$ 마지막 행으로 커서 이동

내용 수정하기
	- r 커서에 위치한 글자를 다른 글자로 수정
	- cw, #cw 커서 위치부터 단어 끝까지 #에 숫자를 넣으면 숫자 크기만큼 단어의 개수를 수정
	- s, #s 커서 위치부터 ESC 일력할 때까지 출력
	- cc 커서 위치 행의 내용 전부 수정
	- C 행의 끝까지

내용 삭제
	- x, #x 커서 위치의 글자 삭제
	- dw, #dw 커서 위치의 단어 삭제
	- dd, #dd 커서 위치의 행 삭제
	- D(shift + d) 커서 위치부터 끝까지의 행 삭제

명령 취소
	- u 명령 취소
	- U 해당 행 모든 명령 취소
	: e! 마지막으로 저장한 내용 이후의 것을 버리고 새로 작업한다.

복사 및 잘라 붙이기
	- yy
	- p
	- P
	- dd, #dd

종료
	:q 저장하지 않고 종료
	:q! 저장하지 않고 종료
	:w 파일명 작업한 내용을 저장만
------------------

마지막 행 모드에서 복사하기, 잘라내기, 붙이기
	-:을 입력하여 마지막 행 모드로 전환

범위 지정하기
	
	- 1.$ or %
	- 1..
	- ..$
	- .-3
	- 10.20

복사하기, 잘라내기, 붙이기
	- :#y
	- <범위>y
	- #d
	- <범위>d
	- pu
	- #pu

검색하기
	- /문자열
	- ?문자열
	- n
	- N

바꾸기
	- :s/문자열1/문자열2/
	- :%s/문자열1/문자열2/g
	- :<범위>s/문자열1/문자열2/
	- :<범위>s/문자열1/문자열2/g
	- :<범위>s/문자열1/문자열2/gc

파일 읽어오기, 여러 파일 편집하기
	- :r file
	- :e file
	- :n

vi에서 셀 명령 사용하기
	- :! 셸 명령
	- :sh

기타 명령키
	- Ctrl + l
	- Ctrl + g
	- shift + j
	- .
	- ~

vi 환경 설정
	- :set nu
	- :set nonu
	- :set list
	- :set nolist
	- :set showmode
	- :set noshowmode
	- :set
	- :set all

--------------------------------------------------------------

셸의 기능
 - 명령어 해석기
 -  프로그래밍 기능 : 셸 스크립트
 - 사용자 환경 설정 기능

셸의 종류

-본셸(sh): 최초의 셸, 유닉스 v7에서 처음 등장, 현재는 배시셸 등 다른 셸로 대체
-C셸(csh):캘리포니아대학교에서 빌 조이가 개발, 2BSD 유닉스에서 발표
	-앨리어스, 히스토리 기능 포함, 셸 스크립트 구문 형식이 C언어와 동일


















*사용자의 기본 셸은 /etc/passwd 파일에 저장

셸 지정 및 변경
	- chsh [option] [username]
		-s 
		-l

특수문자 *
	- ls *
	- cp */tmp
	- ls -F t*
	- cp *.txt ../ch3
	- ls -l h*d

	ls t?.txt
	ls -l tmp[135].txt
	ls -l tmp[1-3].txt
	ls[0-9]*
	ls[A-Za-z]*[0-9]


출력 리다이렉션
>
>>
<


함수명 = 문자열
exprot
지정한 셸 변수를 환경 변수로 바꿈

unset 변수


alias


